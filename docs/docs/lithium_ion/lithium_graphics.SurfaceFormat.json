{"name":"SurfaceFormat","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat","comment":"<p>Defines various types of surface formats.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["lithium_ion/lithium_graphics.Enum"],"subclass":[],"variables":{"index":{"name":"index","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.index","comment":"<p>The index of the enumeration within <a>lithium_ion/lithium_graphics.SurfaceFormat.values</a>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"Rgba":{"name":"Rgba","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.Rgba","comment":"<p>32-bit RGBA pixel format with alpha, using 8 bits per channel.</p>\n<p>Underlying format is an unsigned byte.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"lithium_ion/lithium_graphics.SurfaceFormat","inner":[]}],"annotations":[]},"Rgb":{"name":"Rgb","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.Rgb","comment":"<p>24-bit RGB pixel format, using 8 bits per channel.</p>\n<p>Underlying format is an unsigned byte.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"lithium_ion/lithium_graphics.SurfaceFormat","inner":[]}],"annotations":[]},"Rgb565":{"name":"Rgb565","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.Rgb565","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"lithium_ion/lithium_graphics.SurfaceFormat","inner":[]}],"annotations":[]},"Rgba5551":{"name":"Rgba5551","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.Rgba5551","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"lithium_ion/lithium_graphics.SurfaceFormat","inner":[]}],"annotations":[]},"Rgba4444":{"name":"Rgba4444","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.Rgba4444","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"lithium_ion/lithium_graphics.SurfaceFormat","inner":[]}],"annotations":[]},"Dxt1":{"name":"Dxt1","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.Dxt1","comment":"<p>DXT1 compression format.</p>\n<p>Only available if the compressed texture s3tc extension is supported. Assumes\nthe texture has no alpha component. DXT1 can support alpha but only 1-bit.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"lithium_ion/lithium_graphics.SurfaceFormat","inner":[]}],"annotations":[]},"Dxt3":{"name":"Dxt3","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.Dxt3","comment":"<p>DXT3 compression format.</p>\n<p>Only available if the compressed texture s3tc extension is supported.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"lithium_ion/lithium_graphics.SurfaceFormat","inner":[]}],"annotations":[]},"Dxt5":{"name":"Dxt5","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.Dxt5","comment":"<p>DXT5 compression format.</p>\n<p>Only available if the compressed texture s3tc extension is supported.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"lithium_ion/lithium_graphics.SurfaceFormat","inner":[]}],"annotations":[]},"RgbaFloat":{"name":"RgbaFloat","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.RgbaFloat","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"lithium_ion/lithium_graphics.SurfaceFormat","inner":[]}],"annotations":[]},"RgbFloat":{"name":"RgbFloat","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.RgbFloat","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"lithium_ion/lithium_graphics.SurfaceFormat","inner":[]}],"annotations":[]},"RgbaHalfFloat":{"name":"RgbaHalfFloat","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.RgbaHalfFloat","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"lithium_ion/lithium_graphics.SurfaceFormat","inner":[]}],"annotations":[]},"RgbHalfFloat":{"name":"RgbHalfFloat","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.RgbHalfFloat","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"lithium_ion/lithium_graphics.SurfaceFormat","inner":[]}],"annotations":[]},"values":{"name":"values","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.values","comment":"<p>List of enumerations.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.List","inner":[{"outer":"lithium_ion/lithium_graphics.SurfaceFormat","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>lithium_ion/lithium_graphics.SurfaceFormat.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"index":{"name":"index","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.index","comment":"","commentFrom":"","inheritedFrom":"lithium_graphics.Enum.index","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>lithium_ion/lithium_graphics.SurfaceFormat.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>lithium_ion/lithium_graphics.SurfaceFormat.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"lithium_ion/lithium_graphics.SurfaceFormat.noSuchMethod","comment":"<p><a>lithium_ion/lithium_graphics.SurfaceFormat.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>lithium_ion/lithium_graphics.SurfaceFormat.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>lithium_ion/lithium_graphics.SurfaceFormat.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>lithium_ion/lithium_graphics.SurfaceFormat.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}