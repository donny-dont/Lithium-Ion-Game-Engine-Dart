{"name":"RasterizerState","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState","comment":"<p>Determines how to convert vector data (shapes) into raster data (pixels).</p>","isAbstract":false,"superclass":"lithium_ion/lithium_graphics.GraphicsResource","implements":[],"subclass":[],"variables":{"cullMode":{"name":"cullMode","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.cullMode","comment":"<p>Specifies what triangles are culled based on its direction.</p>\n<p>The default value is <a>lithium_ion/lithium_graphics.CullMode.Back</a>.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"lithium_ion/lithium_graphics.CullMode","inner":[]}],"annotations":[]},"frontFace":{"name":"frontFace","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.frontFace","comment":"<p>Specifies the winding of a front facing polygon.</p>\n<p>The default value is <a>lithium_ion/lithium_graphics.FrontFace.CounterClockwise</a>.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"lithium_ion/lithium_graphics.FrontFace","inner":[]}],"annotations":[]},"depthBias":{"name":"depthBias","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.depthBias","comment":"<p>The depth bias for polygons.</p>\n<p>This is the amount of bias to apply to the depth of a primitive to\nalleviate depth testing problems for primitives of similar depth.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"slopeScaleDepthBias":{"name":"slopeScaleDepthBias","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.slopeScaleDepthBias","comment":"<p>A bias value that takes into account the slope of a polygon.</p>\n<p>This bias value is applied to coplanar primitives to reduce aliasing and\nother rendering artifacts caused by z-fighting.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"scissorTestEnabled":{"name":"scissorTestEnabled","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.scissorTestEnabled","comment":"<p>Whether scissor testing is enabled.</p>\n<p>The default is false.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]}},"inheritedVariables":{"name":{"name":"name","qualifiedName":"lithium_ion/lithium_graphics.GraphicsResource.name","comment":"<p>The name of the resource.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.RasterizerState-","comment":"<p>Creates a new instance of the <a>lithium_ion/lithium_graphics.RasterizerState</a> class.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"device":{"name":"device","optional":false,"named":false,"default":false,"type":[{"outer":"lithium_ion/lithium_graphics.GraphicsDevice","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cullClockwise":{"name":"cullClockwise","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.RasterizerState-cullClockwise","comment":"<p>Initializes an instance of the <a>lithium_ion/lithium_graphics.RasterizerState</a> class with settings for culling primitives with clockwise winding order.</p>\n<p>The state object has the following settings.</p>\n<pre><code>cullMode = CullMode.Back;\nfrontFace = FrontFace.CounterClockwise;\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"device":{"name":"device","optional":false,"named":false,"default":false,"type":[{"outer":"lithium_ion/lithium_graphics.GraphicsDevice","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cullCounterClockwise":{"name":"cullCounterClockwise","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.RasterizerState-cullCounterClockwise","comment":"<p>Initializes an instance of the <a>lithium_ion/lithium_graphics.RasterizerState</a> class with settings for culling primitives with counter-clockwise winding order.</p>\n<p>The state object has the following settings.</p>\n<pre><code>cullMode = CullMode.Back;\nfrontFace = Clockwise;\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"device":{"name":"device","optional":false,"named":false,"default":false,"type":[{"outer":"lithium_ion/lithium_graphics.GraphicsDevice","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cullNone":{"name":"cullNone","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.RasterizerState-cullNone","comment":"<p>Initializes an instance of the <a>lithium_ion/lithium_graphics.RasterizerState</a> class with settings for not culling any primitives.</p>\n<p>The state object has the following settings.</p>\n<pre><code>cullMode = CullMode.None;\nfrontFace = FrontFace.CounterClockwise;\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"device":{"name":"device","optional":false,"named":false,"default":false,"type":[{"outer":"lithium_ion/lithium_graphics.GraphicsDevice","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>lithium_ion/lithium_graphics.RasterizerState.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"isDisposed":{"name":"isDisposed","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.isDisposed","comment":"<p>Whether the object has been disposed</p>","commentFrom":"","inheritedFrom":"lithium_graphics.GraphicsResource.isDisposed","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"graphicsDevice":{"name":"graphicsDevice","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.graphicsDevice","comment":"<p>The <a>lithium_ion/lithium_graphics.GraphicsDevice</a> the resource is bound to.</p>","commentFrom":"","inheritedFrom":"lithium_graphics.GraphicsResource.graphicsDevice","static":false,"abstract":false,"constant":false,"return":[{"outer":"lithium_ion/lithium_graphics.GraphicsDevice","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>lithium_ion/lithium_graphics.RasterizerState.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>lithium_ion/lithium_graphics.RasterizerState.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.noSuchMethod","comment":"<p><a>lithium_ion/lithium_graphics.RasterizerState.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>lithium_ion/lithium_graphics.RasterizerState.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>lithium_ion/lithium_graphics.RasterizerState.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>lithium_ion/lithium_graphics.RasterizerState.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"dispose":{"name":"dispose","qualifiedName":"lithium_ion/lithium_graphics.RasterizerState.dispose","comment":"<p>Immediately releases the unmanaged resources used by this object.</p>","commentFrom":"","inheritedFrom":"lithium_graphics.GraphicsResource.dispose","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}