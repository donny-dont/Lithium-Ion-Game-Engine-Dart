{"name":"Application","qualifiedName":"lithium_ion/lithium_application.Application","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"window":{"name":"window","qualifiedName":"lithium_ion/lithium_application.Application.window","comment":"<p>The <a>lithium_ion/lithium_application.ApplicationWindow</a> attached to the <a>lithium_ion/lithium_application.Application</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"lithium_ion/lithium_application.ApplicationWindow","inner":[]}],"parameters":{},"annotations":[]},"services":{"name":"services","qualifiedName":"lithium_ion/lithium_application.Application.services","comment":"<p>The <a>lithium_ion/lithium_application.Services</a> associated with the <a>lithium_ion/lithium_application.Application</a>.</p>\n<p>Holds all the service providers attached to the <a>lithium_ion/lithium_application.Application</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"lithium_ion/lithium_application.Services","inner":[]}],"parameters":{},"annotations":[]},"onActivated":{"name":"onActivated","qualifiedName":"lithium_ion/lithium_application.Application.onActivated","comment":"<p>Event handler for when the application gains focus.</p>\n<p>Can be used with the <a>lithium_ion/lithium_application.Application.onDeactivated</a> event to unpause the application\nwhen focus is returned.</p>\n<p>The Page Visibility API is used to determine when the application gains\nor loses focus. The <a>lithium_ion/lithium_application.Application.onActivated</a> event will fire when the page gains\nvisibilty, such as when the tab hosting the application is selected.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"lithium_ion/lithium_application.ActivationEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onDeactivated":{"name":"onDeactivated","qualifiedName":"lithium_ion/lithium_application.Application.onDeactivated","comment":"<p>Event handler for when the application loses focus.</p>\n<p>Can be used with the <a>lithium_ion/lithium_application.Application.onActivated</a> event to pause the application\nwhen focus is lost.</p>\n<p>The Page Visibility API is used to determine when the application gains\nor loses focus. The <a>lithium_ion/lithium_application.Application.onDeactivated</a> event will fire when the page loses\nvisibilty, such as when another tab is chosen within the browser.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"lithium_ion/lithium_application.DeactivationEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onExit":{"name":"onExit","qualifiedName":"lithium_ion/lithium_application.Application.onExit","comment":"<p>Event handler for when the application is exiting.</p>\n<p>Hooks into <a>lithium_ion/dart-dom-html.Window.onBeforeUnload</a> to notify when the application is\nexiting.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"lithium_ion/lithium_application.ExitEvent","inner":[]}]}],"parameters":{},"annotations":[]},"instance":{"name":"instance","qualifiedName":"lithium_ion/lithium_application.Application.instance","comment":"","commentFrom":"lithium_application.Application.instance","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"lithium_ion/lithium_application.Application","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"lithium_ion/lithium_application.Application.Application-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"surface":{"name":"surface","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.CanvasElement","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"onUpdate":{"name":"onUpdate","qualifiedName":"lithium_ion/lithium_application.Application.onUpdate","comment":"","commentFrom":"lithium_application.Application.onUpdate","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"onDraw":{"name":"onDraw","qualifiedName":"lithium_ion/lithium_application.Application.onDraw","comment":"","commentFrom":"lithium_application.Application.onDraw","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"addScreen":{"name":"addScreen","qualifiedName":"lithium_ion/lithium_application.Application.addScreen","comment":"","commentFrom":"lithium_application.Application.addScreen","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"screen":{"name":"screen","optional":false,"named":false,"default":false,"type":[{"outer":"lithium_ion/lithium_application.Screen","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"lithium_ion/lithium_application.Application.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>lithium_ion/lithium_application.Application.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"lithium_ion/lithium_application.Application.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"lithium_ion/lithium_application.Application.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>lithium_ion/lithium_application.Application.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>lithium_ion/lithium_application.Application.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"lithium_ion/lithium_application.Application.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"lithium_ion/lithium_application.Application.noSuchMethod","comment":"<p><a>lithium_ion/lithium_application.Application.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>lithium_ion/lithium_application.Application.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>lithium_ion/lithium_application.Application.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>lithium_ion/lithium_application.Application.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}